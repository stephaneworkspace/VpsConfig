# /etc/systemd/system/certbot-renewal.service
[Unit]
Description=Certbot Renewal
[Service]
ExecStart=/usr/local/bin/certbot -q renew --post-hook "systemctl reload nginx"
# /etc/systemd/system/certbot-renewal.timer
[Unit]
Description=Run certbot twice daily

[Timer]
OnCalendar=*-*-* 00,12:00:00
RandomizedDelaySec=43200
Persistent=true

[Install]
WantedBy=timers.target

Instructions:

sudo apt update
https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/

sudo fuser -k 80/tcp
sudo fuser -k 443/tcp

sudo apt upgrade -y && sudo apt update -y
sudo apt install curl gnupg2 ca-certificates lsb-release git npm
sudo apt install nginx -y
sudo systemctl status nginx
sudo systemctl start nginx
sudo systemctl stop nginx
sudo systemctl restart nginx
sudo nginx -t


npm install --global yarn 

# start boot
sudo systemctl enable nginx

# firewall
sudo ufw app list
sudo ufw allow 'Nginx HTTP'
sudo ufw status

hostname -I

sudo apt install -y snapd
COPY
Then, update the snapd to the latest version.

sudo snap install core; sudo snap refresh coreCOPY
Finally, install the Certbot client using the snap command.


sudo snap install --classic certbot

sudo ln -s /snap/bin/certbot /usr/bin/certbot

apt install python3-certbot-nginx

sudo certbot --nginx

sudo systemctl status certbot.timer

https://medium.com/@steadylearner/how-to-get-https-for-rust-web-app-9ea3e58a9a22
https://linuxize.com/post/secure-nginx-with-let-s-encrypt-on-debian-9/

su
apt-get install nginx
# reverse proxy
cd /etc/nginx/site-available/
vi www.partages-web.net.conf

server {
    #listen 80; # Only if sysctl net.ipv6.bindv6only = 1
    listen 80;
    listen [::]:80;

    server_name partages-web.net www.partages-web.net; # 1.

    location / {
        # Forward requests to rocket v4.0 production port
        proxy_pass http://51.77.222.139:8000; # 2.
        proxy_buffering off; # Single Page App work faster with it
        proxy_set_header X-Real-IP $remote_addr;
    }
}

# end

# test syntax
sudo nginx -t
# symbolic link
cd /etc/nginx/sites-enabled && sudo ln -s ../sites-available/www.partages-web.net.conf
# conf
cd /etc/nginx/
vi nginx.conf

#inside nginx.conf(/etc/nginx/nginx.conf)

##
# Gzip Settings
##

gzip on;
gzip_disable "msie6";

gzip_vary on;
gzip_proxied any;
gzip_comp_level 5; # it is better not to be larger than 5
gzip_buffers 16 8k;
gzip_http_version 1.1;

# write what you want to be served as gzip compressed file when use requested it.

gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

# end


server {
  listen 80;
  server_name example.com www.example.com;

  include snippets/letsencrypt.conf;
}

sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048

mkdir the dir in snippets/letsencrypt.conf
chgrp www-data dir in file
chmod g+s dir in file

# /etc/nginx/snippets/letsencrypt.conf
location ^~ /.well-known/acme-challenge/ {
    default_type "text/plain";
    root /var/www/letsencrypt;
    try_files $uri $uri/ =404;
}
# /etc/nginx/snippets/ssl.conf
ssl_dhparam /etc/ssl/certs/dhparam.pem;

ssl_session_timeout 1d;
ssl_session_cache shared:SSL:50m;
ssl_session_tickets off;

ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
ssl_prefer_server_ciphers on;

ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 30s;

add_header Strict-Transport-Security "max-age=15768000; includeSubdomains; preload";
add_header X-Frame-Options SAMEORIGIN;
add_header X-Content-Type-Options nosniff;

# if forgot upper
sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/

sudo systemctl restart nginx
sudo systemctl reload nginx

sudo certbot certonly --agree-tos --email admin@example.com --webroot -w /var/www/letsencrypt/ -d www.partages-web.net -d partages-web.net

server {
    if ($host = partages-web.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = www.partages-web.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80; # Only if sysctl net.ipv6.bindv6only = 1
    #listen [::]:80;

    server_name www.partages-web.net partages-web.net; # 1.
	
	include snippets/letsencrypt.conf;
	
	return 301 https://$host$request_uri;
}

server {
	listen 443 ssl http2;
	#listen [::]:443 ssl http2;

    server_name www.partages-web.net; # 1.

	include snippets/letsencrypt.conf;
	include snippets/ssl.conf;

    ## SSL settings (commented for now)
    ssl_certificate /etc/letsencrypt/live/www.partages-web.net/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/www.partages-web.net/privkey.pem; # managed by Certbot
    ssl_trusted_certificate /etc/letsencrypt/live/www.partages-web.net/chain.pem;
	#ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # don't use SSLv3. Ref: POODLE

	location / {
		proxy_pass http://127.0.0.1:80;
	}    
   
	location /api {
	    # Forward requests to rocket v4.0 production port
	    proxy_pass http://51.77.222.139:8000; # 2.
	    proxy_buffering off; # Single Page App work faster with it
	    proxy_set_header X-Real-IP $remote_addr;
	}
}

server {
	listen 443 ssl http2;
	#listen [::]:443 ssl http2;

    server_name partages-web.net; # 1.

	include snippets/letsencrypt.conf;
	include snippets/ssl.conf;	

    ## SSL settings (commented for now)
    ssl_certificate /etc/letsencrypt/live/partages-web.net/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/partages-web.net/privkey.pem; # managed by Certbot
    ssl_trusted_certificate /etc/letsencrypt/live/www.partages-web.net/chain.pem;
    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # don't use SSLv3. Ref: POODLE

	location / {
		proxy_pass http://127.0.0.1:80;
	}    
   
	location /api {
	    # Forward requests to rocket v4.0 production port
	    proxy_pass http://51.77.222.139:8000; # 2.
	    proxy_buffering off; # Single Page App work faster with it
	    proxy_set_header X-Real-IP $remote_addr;
	}
}

vi /etc/cron.d/certbot
0 */12 * * * root test -x /usr/bin/certbot -a \! -d /run/systemd/system && perl -e 'sleep int(rand(3600))' && certbot -q renew --renew-hook "systemctl reload nginx"

# and then test it
sudo certbot renew --dry-run

8080 => vue.js
